diff --git a/config.h b/config.h
index 425f61c..1d1a5cf 100644
--- a/config.h
+++ b/config.h
@@ -1,14 +1,10 @@
 /* See LICENSE file for copyright and license details. */
 
 /* Constants */
-/* #define TERMINAL "st" */
-/* #define TERMCLASS "St" */
+#define TERMINAL "st"
+#define TERMCLASS "St"
 /* #define TERMINAL "urxvt" */
 /* #define TERMCLASS "Urxvt" */
-/* #define TERMINAL "alacritty" */
-/* #define TERMCLASS "alacritty" */
-#define TERMINAL "wezterm"
-#define TERMCLASS "wezterm"
 
 /* appearance */
 static unsigned int borderpx    = 3;        /* border pixel of windows */
@@ -70,7 +66,7 @@ static const Rule rules[] = {
      *    WM_NAME(STRING) = title
      */
     /* class        instance                title               tags mask       isfloating   isterminal noswallow   monitor */
-    /* { "Gimp",       NULL,                   NULL,               1 << 8,         0,           0,         0,          -1 }, */
+    { "Gimp",       NULL,                   NULL,               1 << 8,         0,           0,         0,          -1 },
     { TERMCLASS,    NULL,                   NULL,               0,              0,           1,         0,          -1 },
     { NULL,         NULL,                   "Event Tester",     0,              0,           0,         1,          -1 },
     { NULL,         "spterm",               NULL,               SPTAG(0),       1,           1,         1,          -1 },
@@ -203,7 +199,7 @@ static const Key keys[] = {
         /* { MODKEY,                   XK_Tab,             view,               {0} }, */
         /* { MODKEY,                   XK_Tab,             view,               {0} }, */
         { MODKEY,                   XK_q,               killclient,         {0} },
-        { MODKEY|ShiftMask,         XK_p,               togglebar,          {0} },
+        { MODKEY|ShiftMask,         XK_p,               togglebars,         {0} },
         { MODKEY|ControlMask|ShiftMask,     XK_p,       togglebar,          {0} },
         { MODKEY,                   XK_h,               focusmon,           { .i = -1 } },
         { MODKEY|ShiftMask,         XK_h,               tagmonview,         { .i = -1 } },
@@ -228,7 +224,7 @@ static const Key keys[] = {
         { MODKEY|ShiftMask,         XK_s,               spawn,              SHCMD("import png:- | xclip -selection clipboard -t image/png") },
         { MODKEY|ControlMask,       XK_s,               spawn,              SHCMD("~/.local/bin/my_scripts/tesseract_ocr.sh") },
         { MODKEY,                   XK_d,               spawn,              SHCMD("rofi -show run -theme ~/.config/rofi/themes/gruvbox/gruvbox-dark.rasi") },
-        { MODKEY,                   XK_r,               spawn,              SHCMD("dmenu_run -i -l 20") },
+        { MODKEY,                   XK_r,               spawn,              SHCMD("dmenu_run -fn 'Linux Libertine Mono'") },
         { MODKEY|ShiftMask,         XK_r,               spawn,              SHCMD("rofi -show run -theme ~/.config/polybar/forest/scripts/rofi/launcher.rasi") },
         { MODKEY,                   XK_t,               spawn,              SHCMD("~/.local/bin/my_scripts/script_copy.sh") },
         { MODKEY|ShiftMask,         XK_t,               spawn,              SHCMD("~/.local/bin/my_scripts/script_helper.sh " TERMINAL) },
@@ -335,7 +331,7 @@ static const Button buttons[] = {
     { ClkStatusText,        0,              Button5,        sigdwmblocks,   {.i = 5} },
     { ClkStatusText,        ShiftMask,      Button1,        sigdwmblocks,   {.i = 6} },
 #endif
-    { ClkStatusText,        ShiftMask,      Button3,        spawn,          SHCMD(TERMINAL " -e nvim ~/.config/dwmblocks/config.h") },
+    { ClkStatusText,        ShiftMask,      Button3,        spawn,          SHCMD(TERMINAL " -e nvim ~/.config/dwm_mul_mon/dwmblocks/config.h") },
     { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
     { ClkClientWin,         MODKEY,         Button2,        defaultgaps,    {0} },
     { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
diff --git a/drw.c b/drw.c
index 461a2f0..909cb49 100644
--- a/drw.c
+++ b/drw.c
@@ -153,7 +153,7 @@ xfont_free(Fnt *font)
 }
 
 Fnt*
-drw_fontset_create(Drw* drw, const char *fonts[], size_t fontcount)
+drw_fontset_create(Drw* drw, char *fonts[], size_t fontcount)
 {
     Fnt *cur, *ret = NULL;
     size_t i;
diff --git a/drw.h b/drw.h
index 0e6f8bd..7b54fbb 100644
--- a/drw.h
+++ b/drw.h
@@ -32,7 +32,7 @@ void drw_resize(Drw *drw, unsigned int w, unsigned int h);
 void drw_free(Drw *drw);
 
 /* Fnt abstraction */
-Fnt *drw_fontset_create(Drw* drw, const char *fonts[], size_t fontcount);
+Fnt *drw_fontset_create(Drw* drw, char *fonts[], size_t fontcount);
 void drw_fontset_free(Fnt* set);
 unsigned int drw_fontset_getwidth(Drw *drw, const char *text);
 void drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned int *w, unsigned int *h);
diff --git a/dwm.c b/dwm.c
index cd02ac0..4f94ff1 100644
--- a/dwm.c
+++ b/dwm.c
@@ -196,6 +196,7 @@ static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
 static Monitor *dirtomon(int dir);
+static Monitor *numtomon(int num);
 static void drawbar(Monitor *m);
 static void drawbars(void);
 static int drawstatusbar(Monitor *m, int bh, char* text);
@@ -203,6 +204,7 @@ static void expose(XEvent *e);
 static void focus(Client *c);
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
+static void focusnthmon(const Arg *arg);
 static void focusstack(const Arg *arg);
 static Atom getatomprop(Client *c, Atom prop);
 static int getrootptr(int *x, int *y);
@@ -255,7 +257,12 @@ static void tag(const Arg *arg);
 static void tagview(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tagmonview(const Arg *arg);
+static void tagnextmon(const Arg *arg);
+static void tagnewmon(const Arg *arg);
+static void tagnthmon(const Arg *arg);
+static void tagnthmonview(const Arg *arg);
 static void togglebar(const Arg *arg);
+static void togglebars(const Arg *arg);
 static void togglefloating(const Arg *arg);
 static void togglescratch(const Arg *arg);
 static void togglesticky(const Arg *arg);
@@ -800,7 +807,11 @@ createmon(void)
     Monitor *m;
 
     m = ecalloc(1, sizeof(Monitor));
-    m->tagset[0] = m->tagset[1] = 1;
+    if (mons)
+        m->tagset[0] = m->tagset[1] = 2;
+    else
+        m->tagset[0] = m->tagset[1] = 1;
+
     m->mfact = mfact;
     m->nmaster = nmaster;
     m->showbar = showbar;
@@ -866,6 +877,17 @@ dirtomon(int dir)
     return m;
 }
 
+Monitor *
+numtomon(int num)
+{
+    Monitor *m = NULL;
+    int i = 0;
+
+    for(m = mons, i=0; m->next && i < num; m = m->next)
+        i++;
+    return m;
+}
+
 int
 drawstatusbar(Monitor *m, int bh, char* stext)
 {
@@ -1100,6 +1122,22 @@ focusmon(const Arg *arg)
     focus(NULL);
 }
 
+void
+focusnthmon(const Arg *arg)
+{
+    Monitor *m;
+
+    if (!mons->next)
+        return;
+
+    if ((m = numtomon(arg->i)) == selmon)
+        return;
+    unfocus(selmon->sel, 0);
+    XWarpPointer(dpy, None, m->barwin, 0, 0, 0, 0, m->mw / 2, m->mh / 2);
+    selmon = m;
+    focus(NULL);
+}
+
 void
 focusstack(const Arg *arg)
 {
@@ -2092,9 +2130,19 @@ void
 tag(const Arg *arg)
 {
     if (selmon->sel && arg->ui & TAGMASK) {
-        selmon->sel->tags = arg->ui & TAGMASK;
-        focus(NULL);
-        arrange(selmon);
+        // Moving to even tag, selected mon != first mon
+        if ((arg->ui & 341) == 0 && selmon != mons) {
+            selmon->sel->tags = arg->ui & TAGMASK;
+            focus(NULL);
+            arrange(selmon);
+            // Moving to odd tag, selected mon == first mon
+        } else if ((arg->ui & 341) > 0 && selmon == mons) {
+            selmon->sel->tags = arg->ui & TAGMASK;
+            focus(NULL);
+            arrange(selmon);
+        } else {
+            tagnextmon(arg);
+        }
     }
 }
 
@@ -2102,6 +2150,16 @@ void
 tagview(const Arg *arg)
 {
     if (selmon->sel && arg->ui & TAGMASK) {
+        // If first monitor and moving to even tag (second mon)
+        if ((arg->ui & 341) == 0 && selmon == mons) {
+            tagnthmonview(&((Arg) { .i = 1 }));
+            tagnewmon(arg);
+            return;
+        } else if ((arg->ui & 341) > 0 && selmon != mons) {
+            tagnthmonview(&((Arg) { .i = 0 }));
+            tagnewmon(arg);
+            return;
+        }
         selmon->sel->tags = arg->ui & TAGMASK;
         focus(NULL);
         arrange(selmon);
@@ -2125,6 +2183,51 @@ tagmonview(const Arg *arg)
     sendmonview(selmon->sel, dirtomon(arg->i));
 }
 
+void
+tagnextmon(const Arg *arg)
+{
+    Client *sel;
+    Monitor *newmon;
+
+    if (!selmon->sel || !mons->next)
+        return;
+    sel = selmon->sel;
+    newmon = dirtomon(1);
+    sendmon(sel, newmon);
+    if (sel && arg->ui & TAGMASK) {
+        sel->tags = arg->ui & TAGMASK;
+        focus(NULL);
+        arrange(newmon);
+    }
+}
+
+void
+tagnewmon(const Arg *arg)
+{
+    if (selmon->sel && arg->ui & TAGMASK) {
+        selmon->sel->tags = arg->ui & TAGMASK;
+        focus(NULL);
+        arrange(selmon);
+        view(arg);
+    }
+}
+
+void
+tagnthmon(const Arg *arg)
+{
+    if (!selmon->sel || !mons->next)
+        return;
+    sendmon(selmon->sel, numtomon(arg->i));
+}
+
+void
+tagnthmonview(const Arg *arg)
+{
+    if (!selmon->sel || !mons->next)
+        return;
+    sendmonview(selmon->sel, numtomon(arg->i));
+}
+
 void
 togglebar(const Arg *arg)
 {
@@ -2134,6 +2237,18 @@ togglebar(const Arg *arg)
     arrange(selmon);
 }
 
+void
+togglebars(const Arg *arg)
+{
+    Monitor *m;
+    for (m = mons; m; m = m->next) {
+        m->showbar = !m->showbar;
+        updatebarpos(m);
+        XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+        arrange(m);
+    }
+}
+
 void
 togglefloating(const Arg *arg)
 {
@@ -2540,10 +2655,18 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
-    if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags]) {
-        view(&((Arg) { .ui = 0 }));
+    if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
         return;
-    }
+    /* if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags]) { */
+    /*     view(&((Arg) { .ui = 0 })); */
+    /*     return; */
+    /* } */
+
+    // GENIUS 101010101
+    if ((arg->ui & 341) == 0)
+        focusnthmon(&((Arg) { .i = 1 }));
+    else
+        focusnthmon(&((Arg) { .i = 0 }));
 
     selmon->seltags ^= 1; /* toggle sel tagset */
     if (arg->ui & TAGMASK)
